/*!
 * \file CBFMVariable.cpp
 * \brief Definition of the BFM solution fields.
 * \author E.C.Bunschoten
 * \version 7.1.0 "Blackbird"
 *
 * SU2 Project Website: https://su2code.github.io
 *
 * The SU2 Project is maintained by the SU2 Foundation
 * (http://su2foundation.org)
 *
 * Copyright 2012-2020, SU2 Contributors (cf. AUTHORS.md)
 *
 * SU2 is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * SU2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with SU2. If not, see <http://www.gnu.org/licenses/>.
 */


#include "../../include/variables/CBFMVariable.hpp"
#include "../../../Common/include/parallelization/omp_structure.hpp"

CBFMVariable::CBFMVariable(unsigned long nPoints, unsigned short NDim, unsigned short nBFMParams){
    nPoint = nPoints;
    nDim = NDim;

    /*
    The geometric parameters defining the blade shape are stored in the auxilary variable
    structure. 
    */
    nAuxVar = nBFMParams;
    AuxVar.resize(nPoint, nAuxVar) = su2double(0.0);

    /*
    During the solution process, the body forces generated by the BFM are stored in the 
    Body_Force_Vector matrix.
    */
    Body_Force_Vector.resize(nPoint, nDim) = su2double(0.0);

    /*
    The Relative_Velocity matrix contains the spatial data on the axial, tangential and radial
    relative velocity components.
    */
    Relative_Velocity.resize(nPoint, nDim) = su2double(0.0);

    /*
    Sizing the cylindrical projection data structures
    */
    proj_vector_axial.resize(nPoint, nDim) = su2double(0.0);
    proj_vector_tangential.resize(nPoint, nDim) = su2double(0.0);
    proj_vector_radial.resize(nPoint, nDim) = su2double(0.0);

    Grad_AuxVar.resize(nPoint, nAuxVar, nDim, 0.0);
    Solution.resize(nPoint, nBFMParams) = su2double(0.0);
    Gradient.resize(nPoint, nBFMParams, nDim, 0.0);
    
}


