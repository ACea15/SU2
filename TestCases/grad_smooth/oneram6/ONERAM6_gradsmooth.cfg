%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                              %
% SU2 configuration file                                                       %
% Case description: Sobolev smoothing for gradient on the ONERA M6 wing        %
% Author: Thomas Dick (TU Kaiserslautern)                                      %
% Date: 11.11.2021                                                             %
% File Version 7.2.1 "Blackbird"                                               %
%                                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% ------------- DIRECT, ADJOINT, AND LINEARIZED PROBLEM DEFINITION ------------%
%
% Solver type (EULER, NAVIER_STOKES, RANS,
%              INC_EULER, INC_NAVIER_STOKES, INC_RANS,
%              NEMO_EULER, NEMO_NAVIER_STOKES,
%              FEM_EULER, FEM_NAVIER_STOKES, FEM_RANS, FEM_LES,
%              HEAT_EQUATION_FVM, ELASTICITY)
SOLVER= RANS
%
% Specify turbulence model (NONE, SA, SA_NEG, SST, SA_E, SA_COMP, SA_E_COMP, SST_SUST)
KIND_TURB_MODEL= SST
%
% Mathematical problem (DIRECT, CONTINUOUS_ADJOINT, DISCRETE_ADJOINT)
% Defaults to DISCRETE_ADJOINT for the SU2_*_AD codes, and to DIRECT otherwise.
MATH_PROBLEM= DISCRETE_ADJOINT
%
% Restart solution (NO, YES)
RESTART_SOL= NO

% ------------------------------- SOLVER CONTROL ------------------------------%
%
% Number of iterations for single-zone problems
ITER= 2
%
% Convergence field
CONV_FIELD= RMS_DENSITY, RMS_ADJ_DENSITY
%
% Min value of the residual (log10 of the residual)
CONV_RESIDUAL_MINVAL= -16
%
% Start convergence criteria at iteration number
CONV_STARTITER= 10
%
% Number of elements to apply the criteria
CONV_CAUCHY_ELEMS= 100
%
% Epsilon to control the series convergence
CONV_CAUCHY_EPS= 1E-16

% -------------------- COMPRESSIBLE FREE-STREAM DEFINITION --------------------%
%
% Mach number (non-dimensional, based on the free-stream values)
MACH_NUMBER= 0.8395
%
% Angle of attack (degrees, only for compressible flows)
AOA= 3.06
%
% Side-slip angle (degrees, only for compressible flows)
SIDESLIP_ANGLE= 0.0
%
% Init option to choose between Reynolds (default) or thermodynamics quantities
% for initializing the solution (REYNOLDS, TD_CONDITIONS)
INIT_OPTION= REYNOLDS
%
% Free-stream option to choose between density and temperature (default) for
% initializing the solution (TEMPERATURE_FS, DENSITY_FS)
FREESTREAM_OPTION= TEMPERATURE_FS
%
% Free-stream temperature (288.15 K, 518.67 R by default)
FREESTREAM_TEMPERATURE= 288.15
%
% Reynolds number (non-dimensional, based on the free-stream values)
REYNOLDS_NUMBER= 11.72E6
%
% Reynolds length (1 m, 1 inch by default)
REYNOLDS_LENGTH= 0.64607
%
% Compressible flow non-dimensionalization (DIMENSIONAL, FREESTREAM_PRESS_EQ_ONE,
%                              FREESTREAM_VEL_EQ_MACH, FREESTREAM_VEL_EQ_ONE)
REF_DIMENSIONALIZATION= FREESTREAM_VEL_EQ_ONE

% ---------------------- REFERENCE VALUE DEFINITION ---------------------------%
%
% Reference origin for moment computation (m or in)
REF_ORIGIN_MOMENT_X = 0.25
REF_ORIGIN_MOMENT_Y = 0.00
REF_ORIGIN_MOMENT_Z = 0.00
%
% Reference length for moment non-dimensional coefficients (m or in)
REF_LENGTH= 0.64607
%
% Reference area for non-dimensional force coefficients (0 implies automatic
% calculation) (m^2 or in^2)
REF_AREA= 0
%
% Aircraft semi-span (0 implies automatic calculation) (m or in)
SEMI_SPAN= 0.0

% ---- NONEQUILIBRIUM GAS, IDEAL GAS, POLYTROPIC, VAN DER WAALS AND PENG ROBINSON CONSTANTS -------%
%
% Fluid model (STANDARD_AIR, IDEAL_GAS, VW_GAS, PR_GAS,
%              CONSTANT_DENSITY, INC_IDEAL_GAS, INC_IDEAL_GAS_POLY, MUTATIONPP, SU2_NONEQ)
FLUID_MODEL= STANDARD_AIR
%
% Ratio of specific heats (1.4 default and the value is hardcoded
%                          for the model STANDARD_AIR, compressible only)
GAMMA_VALUE= 1.4
%
% Specific gas constant (287.058 J/kg*K default and this value is hardcoded
%                        for the model STANDARD_AIR, compressible only)
GAS_CONSTANT= 287.058

% --------------------------- VISCOSITY MODEL ---------------------------------%
%
% Viscosity model (SUTHERLAND, CONSTANT_VISCOSITY, POLYNOMIAL_VISCOSITY).
VISCOSITY_MODEL= SUTHERLAND
%
% Sutherland Viscosity Ref (1.716E-5 default value for AIR SI)
MU_REF= 1.716E-5
%
% Sutherland Temperature Ref (273.15 K default value for AIR SI)
MU_T_REF= 273.15
%
% Sutherland constant (110.4 default value for AIR SI)
SUTHERLAND_CONSTANT= 110.4

% --------------------------- THERMAL CONDUCTIVITY MODEL ----------------------%
%
% Laminar Conductivity model (CONSTANT_CONDUCTIVITY, CONSTANT_PRANDTL,
% POLYNOMIAL_CONDUCTIVITY).
CONDUCTIVITY_MODEL= CONSTANT_PRANDTL
%
% Laminar Prandtl number (0.72 (air), only for CONSTANT_PRANDTL)
PRANDTL_LAM= 0.72
%
% Turbulent Prandtl number (0.9 (air) by default)
PRANDTL_TURB= 0.90

% -------------------- BOUNDARY CONDITION DEFINITION --------------------------%
%
% Navier-Stokes (no-slip), constant heat flux wall  marker(s) (NONE = no marker)
% Format: ( marker name, constant heat flux (J/m^2), ... )
MARKER_HEATFLUX= ( WING, 0.0 )
%
% Far-field boundary marker(s) (NONE = no marker)
MARKER_FAR= ( FARFIELD )
%
% Symmetry boundary marker(s) (NONE = no marker)
% Implementation identical to MARKER_EULER.
MARKER_SYM= ( SYMMETRY )

% ------------------------ SURFACES IDENTIFICATION ----------------------------%
%
% Marker(s) of the surface in the surface flow solution file
MARKER_PLOTTING = ( WING )
%
% Marker(s) of the surface where the non-dimensional coefficients are evaluated.
MARKER_MONITORING = ( WING )

% ------------- COMMON PARAMETERS DEFINING THE NUMERICAL METHOD ---------------%
%
% Numerical method for spatial gradients (GREEN_GAUSS, WEIGHTED_LEAST_SQUARES)
NUM_METHOD_GRAD= GREEN_GAUSS
%
% CFL number (initial value for the adaptive CFL number)
CFL_NUMBER= 100.0
%
% Adaptive CFL number (NO, YES)
CFL_ADAPT= NO
%
% Parameters of the adaptive CFL number (factor-down, factor-up, CFL min value,
%                                        CFL max value, acceptable linear solver convergence)
% Local CFL increases by factor-up until max if the solution rate of change is not limited,
% and acceptable linear convergence is achieved. It is reduced if rate is limited, or if there
% is not enough linear convergence, or if the nonlinear residuals are stagnant and oscillatory.
% It is reset back to min when linear solvers diverge, or if nonlinear residuals increase too much.
CFL_ADAPT_PARAM= ( 1.5, 0.5, 25.0, 100000.0 )
%
% Maximum Delta Time in local time stepping simulations
MAX_DELTA_TIME= 1E6
%
% Runge-Kutta alpha coefficients
RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 )
%
% Objective function in gradient evaluation   (DRAG, LIFT, SIDEFORCE, MOMENT_X,
%                                             MOMENT_Y, MOMENT_Z, EFFICIENCY, BUFFET,
%                                             EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%                                             FORCE_X, FORCE_Y, FORCE_Z, THRUST,
%                                             TORQUE, TOTAL_HEATFLUX,
%                                             MAXIMUM_HEATFLUX, INVERSE_DESIGN_PRESSURE,
%                                             INVERSE_DESIGN_HEATFLUX, SURFACE_TOTAL_PRESSURE,
%                                             SURFACE_MASSFLOW, SURFACE_STATIC_PRESSURE, SURFACE_MACH)
% For a weighted sum of objectives: separate by commas, add OBJECTIVE_WEIGHT and MARKER_MONITORING in matching order.
OBJECTIVE_FUNCTION= DRAG
%
% List of weighting values when using more than one OBJECTIVE_FUNCTION. Separate by commas and match with MARKER_MONITORING.
OBJECTIVE_WEIGHT = 1.0

% ----------- SLOPE LIMITER AND DISSIPATION SENSOR DEFINITION -----------------%
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the flow equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_FLOW= YES
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_FLOW= VENKATAKRISHNAN
%
% Monotonic Upwind Scheme for Conservation Laws (TVD) in the turbulence equations.
%           Required for 2nd order upwind schemes (NO, YES)
MUSCL_TURB= NO
%
% Slope limiter (NONE, VENKATAKRISHNAN, VENKATAKRISHNAN_WANG,
%                BARTH_JESPERSEN, VAN_ALBADA_EDGE)
SLOPE_LIMITER_TURB= VENKATAKRISHNAN
%
% Coefficient for the Venkat's limiter (upwind scheme). A larger values decrease
%             the extent of limiting, values approaching zero cause
%             lower-order approximation to the solution (0.05 by default)
VENKAT_LIMITER_COEFF= 0.05
%
% 2nd and 4th order artificial dissipation coefficients for
%     the JST method ( 0.5, 0.02 by default )
JST_SENSOR_COEFF= ( 0.5, 0.0078125 )

% ------------------------ LINEAR SOLVER DEFINITION ---------------------------%
%
% Linear solver or smoother for implicit formulations:
% BCGSTAB, FGMRES, RESTARTED_FGMRES, CONJUGATE_GRADIENT (self-adjoint problems only), SMOOTHER.
LINEAR_SOLVER= FGMRES
%
% Preconditioner of the Krylov linear solver or type of smoother (ILU, LU_SGS, LINELET, JACOBI)
LINEAR_SOLVER_PREC= ILU
%
% Minimum error of the linear solver for implicit formulations
LINEAR_SOLVER_ERROR= 1E-10
%
% Max number of iterations of the linear solver for the implicit formulation
LINEAR_SOLVER_ITER= 10

% -------------------------- MULTIGRID PARAMETERS -----------------------------%
%
% Multi-grid levels (0 = no multi-grid)
MGLEVEL= 0
%
% Multi-grid cycle (V_CYCLE, W_CYCLE, FULLMG_CYCLE)
MGCYCLE= V_CYCLE
%
% Multi-grid pre-smoothing level
MG_PRE_SMOOTH= ( 1, 1, 1, 1 )
%
% Multi-grid post-smoothing level
MG_POST_SMOOTH= ( 0, 0, 0, 0 )
%
% Jacobi implicit smoothing of the correction
MG_CORRECTION_SMOOTH= ( 0, 0, 0, 0 )
%
% Damping factor for the residual restriction
MG_DAMP_RESTRICTION= 0.7
%
% Damping factor for the correction prolongation
MG_DAMP_PROLONGATION= 0.7

% -------------------- FLOW NUMERICAL METHOD DEFINITION -----------------------%
%
% Convective numerical method (JST, JST_KE, JST_MAT, LAX-FRIEDRICH, CUSP, ROE, AUSM,
%                              AUSMPLUSUP, AUSMPLUSUP2, AUSMPWPLUS, HLLC, TURKEL_PREC,
%                              SW, MSW, FDS, SLAU, SLAU2, L2ROE, LMROE)
CONV_NUM_METHOD_FLOW= JST
%
% Time discretization (RUNGE-KUTTA_EXPLICIT, EULER_IMPLICIT, EULER_EXPLICIT)
TIME_DISCRE_FLOW= EULER_IMPLICIT

% -------------------- TURBULENT NUMERICAL METHOD DEFINITION ------------------%
%
% Convective numerical method (SCALAR_UPWIND)
CONV_NUM_METHOD_TURB= SCALAR_UPWIND
%
% Time discretization (EULER_IMPLICIT)
TIME_DISCRE_TURB= EULER_IMPLICIT

% ----------------------- GEOMETRY EVALUATION PARAMETERS ----------------------%
%
% Marker(s) of the surface where geometrical based function will be evaluated
GEO_MARKER= ( WING )
%
% Description of the geometry to be analyzed (AIRFOIL, WING)
GEO_DESCRIPTION= WING
%
% Coordinate of the stations to be analyzed
GEO_LOCATION_STATIONS= (0.0, 0.2, 0.4, 0.6, 0.8)
%
% Geometrical bounds (Y coordinate) for the wing geometry analysis or
% fuselage evaluation (X coordinate)
GEO_BOUNDS= (0, 0.8)
%
% Plot loads and Cp distributions on each airfoil section
GEO_PLOT_STATIONS= YES
%
% Number of section cuts to make when calculating wing geometry
GEO_NUMBER_STATIONS= 25
%
% Geometrical evaluation mode (FUNCTION, GRADIENT)
GEO_MODE= GRADIENT

% ----------------------- SOBOLEV GRADIENT SMOOTHING OPTIONS ----------------------%
%
% Activate the gradient smoothing solver for the discrete adjoint driver (NO, YES)
SMOOTH_GRADIENT= YES
%
% Scaling factor for the identity part of the Laplace-Beltrami operator
SMOOTHING_EPSILON1= 51.8116714655595
%
% Scaling factor for the Laplace part of the Laplace-Beltrami operator
SMOOTHING_EPSILON2= 0.700463534712351
%
% Switch for running the smoothing procedure seperately in each space dimension (NO, YES).
SEPARATE_DIMENSIONS= NO
%
% Switch for applying the Sobolev smoothing to the design surface mesh, i.e., instead of the whole volume mesh (NO, YES).
SMOOTH_ON_SURFACE= YES
%
% Use Dirichlet boundary conditions when working on the design surface, only used for SMOOTH_ON_SURFACE= YES (NO, YES).
DIRICHLET_SURFACE_BOUNDARY= NO
%
% Marker for boundaries where Dirichlet boundary conditions are applied, only valid if working on the volume mesh. 
MARKER_SOBOLEVBC= ( airfoil )
%
% Mode how the Sobolev method is applied to the discrete adjoint gradient.
% - NO_MODUS              (Default option if none is choosen.)
% - PARAM_LEVEL_COMPLETE  (Apply Sobolev smoothing to the projected gradient, w.r.t. the DV.)
% - MESH_LEVEL            (Apply Sobolev smoothing to the mesh sensitivities.)
% - DEBUG                 (Test the finite elements asembly of the Laplace-Beltrami operator.)
% - ONLY_GRAD             (Only calculate the classical gradient.)
SOBOLEV_MODE= PARAM_LEVEL_COMPLETE
%
% Output filename for the assembled Sobolev smoothing system matrix
HESS_OBJFUNC_FILENAME= of_hess.dat

% ----------------------- DESIGN VARIABLE PARAMETERS --------------------------%
%
% Kind of deformation (NO_DEFORMATION, SCALE_GRID, TRANSLATE_GRID, ROTATE_GRID,
%                      FFD_SETTING, FFD_NACELLE,
%                      FFD_CONTROL_POINT, FFD_CAMBER, FFD_THICKNESS, FFD_TWIST
%                      FFD_CONTROL_POINT_2D, FFD_CAMBER_2D, FFD_THICKNESS_2D,
%                      FFD_TWIST_2D, HICKS_HENNE, SURFACE_BUMP, SURFACE_FILE)

%
% Marker of the surface in which we are going apply the shape deformation
DV_MARKER= ( WING )
%
% Parameters of the shape deformation
% - NO_DEFORMATION ( 1.0 )
% - TRANSLATE_GRID ( x_Disp, y_Disp, z_Disp ), as a unit vector
% - ROTATE_GRID ( x_Orig, y_Orig, z_Orig, x_End, y_End, z_End ) axis, DV_VALUE in deg.
% - SCALE_GRID ( 1.0 )
% - ANGLE_OF_ATTACK ( 1.0 )
% - FFD_SETTING ( 1.0 )
% - FFD_CONTROL_POINT ( FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Disp, y_Disp, z_Disp )
% - FFD_NACELLE ( FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Disp, phi_Disp )
% - FFD_GULL ( FFD_BoxTag, j_Ind )
% - FFD_ANGLE_OF_ATTACK ( FFD_BoxTag, 1.0 )
% - FFD_CAMBER ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_THICKNESS ( FFD_BoxTag, i_Ind, j_Ind )
% - FFD_TWIST ( FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
% - FFD_CONTROL_POINT_2D ( FFD_BoxTag, i_Ind, j_Ind, x_Disp, y_Disp )
% - FFD_CAMBER_2D ( FFD_BoxTag, i_Ind )
% - FFD_THICKNESS_2D ( FFD_BoxTag, i_Ind )
% - FFD_TWIST_2D ( FFD_BoxTag, x_Orig, y_Orig )
% - HICKS_HENNE ( Lower Surface (0)/Upper Surface (1)/Only one Surface (2), x_Loc )
% - SURFACE_BUMP ( x_Start, x_End, x_Loc )
DV_PARAM= ( WINGBOX, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 1.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 2.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 3.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 4.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 5.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 6.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 7.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 8.0, 0.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 0.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 1.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 2.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 3.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 4.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 5.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 6.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 7.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 0.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 1.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 2.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 3.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 4.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 5.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 6.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 7.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 8.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 9.0, 8.0, 1.0, 0.0, 0.0, 1.0) ; ( WINGBOX, 10.0, 8.0, 1.0, 0.0, 0.0, 1.0)
%
% Value of the shape deformation
DV_VALUE= 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0

% ------------------------ GRID DEFORMATION PARAMETERS ------------------------%
%
% Linear solver or smoother for implicit formulations (FGMRES, RESTARTED_FGMRES, BCGSTAB)
DEFORM_LINEAR_SOLVER= FGMRES
%
% Number of smoothing iterations for mesh deformation
DEFORM_LINEAR_SOLVER_ITER= 500
%
% Minimum residual criteria for the linear solver convergence of grid deformation
DEFORM_LINEAR_SOLVER_ERROR= 1E-10
%
% Print the residuals during mesh deformation to the console (YES, NO)
DEFORM_CONSOLE_OUTPUT= YES
%
% Deformation coefficient (linear elasticity limits from -1.0 to 0.5, a larger
% value is also possible)
DEFORM_COEFF = 1E6
%
% Type of element stiffness imposed for FEA mesh deformation (INVERSE_VOLUME,
%                                           WALL_DISTANCE, CONSTANT_STIFFNESS)
DEFORM_STIFFNESS_TYPE= WALL_DISTANCE

% -------------------- FREE-FORM DEFORMATION PARAMETERS -----------------------%
%
% Tolerance of the Free-Form Deformation point inversion
FFD_TOLERANCE= 1E-10
%
% Maximum number of iterations in the Free-Form Deformation point inversion
FFD_ITERATIONS= 500
%
% FFD box definition: 3D case (FFD_BoxTag, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4,
%                              X5, Y5, Z5, X6, Y6, Z6, X7, Y7, Z7, X8, Y8, Z8)
%                     2D case (FFD_BoxTag, X1, Y1, 0.0, X2, Y2, 0.0, X3, Y3, 0.0, X4, Y4, 0.0,
%                              0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
FFD_DEFINITION= (WINGBOX, -0.0403, 0, -0.04836, 0.8463,0, -0.04836, 1.209, 1.2896, -0.04836, 0.6851, 1.2896, -0.04836, -0.0403, 0, 0.04836, 0.8463, 0, 0.04836, 1.209, 1.2896, 0.04836, 0.6851, 1.2896, 0.04836)
%
% FFD box degree: 3D case (x_degree, y_degree, z_degree)
%                 2D case (x_degree, y_degree, 0)
FFD_DEGREE= (10, 8, 1)
%
% Surface grid continuity at the intersection with the faces of the FFD boxes.
% To keep a particular level of surface continuity, SU2 automatically freezes the right
% number of control point planes (NO_DERIVATIVE, 1ST_DERIVATIVE, 2ND_DERIVATIVE, USER_INPUT)
FFD_CONTINUITY= 2ND_DERIVATIVE

% ------------------------- SCREEN/HISTORY VOLUME OUTPUT --------------------------%
%
% Screen output fields (use 'SU2_CFD -d <config_file>' to view list of available fields)
SCREEN_OUTPUT= (INNER_ITER, RMS_DENSITY, RMS_ENERGY, DRAG, LIFT, RMS_ADJ_DENSITY, RMS_ADJ_ENERGY)
%
% History output groups (use 'SU2_CFD -d <config_file>' to view list of available fields)
HISTORY_OUTPUT= (ITER, RMS_RES, AERO_COEFF, SENSITIVITY)
%
% Volume output fields/groups (use 'SU2_CFD -d <config_file>' to view list of available fields)
VOLUME_OUTPUT= (COORDINATES, SOLUTION, PRIMITIVE, SENSITIVITY)
%
% Writing frequency for screen output
SCREEN_WRT_FREQ_INNER= 10
%
% Writing frequency for history output
HISTORY_WRT_FREQ_INNER= 1
%
% Writing frequency for volume/surface output
OUTPUT_WRT_FREQ= 1000

% ------------------------- INPUT/OUTPUT FILE INFORMATION --------------------------%
%
% Decimal precision
OUTPUT_PRECISION=10
%
% Mesh input file
MESH_FILENAME= mesh_tutorial_ffd.su2
%
% Mesh input file format (SU2, CGNS)
MESH_FORMAT= SU2
%
% Mesh output file
MESH_OUT_FILENAME= mesh_tutorial_ffd_deform.su2
%
% Restart flow input file
SOLUTION_FILENAME= solution_flow.dat
%
% Restart adjoint input file
SOLUTION_ADJ_FILENAME= solution_adj.dat
%
% Output tabular file format (TECPLOT, CSV)
TABULAR_FORMAT= TECPLOT
%
% Files to output
% Possible formats : (TECPLOT, TECPLOT_BINARY, SURFACE_TECPLOT,
%  SURFACE_TECPLOT_BINARY, CSV, SURFACE_CSV, PARAVIEW, PARAVIEW_BINARY, SURFACE_PARAVIEW,
%  SURFACE_PARAVIEW_BINARY, MESH, RESTART_BINARY, RESTART_ASCII, CGNS, SURFACE_CGNS, STL)
% default : (RESTART, PARAVIEW, SURFACE_PARAVIEW)
OUTPUT_FILES= (RESTART, PARAVIEW, SURFACE_PARAVIEW)
%
% Output file convergence history (w/o extension)
CONV_FILENAME= history
%
% Output file restart flow
RESTART_FILENAME= restart_flow.dat
%
% Output file restart adjoint
RESTART_ADJ_FILENAME= restart_adj.dat
%
% Output file flow (w/o extension) variables
VOLUME_FILENAME= flow
%
% Output file adjoint (w/o extension) variables
VOLUME_ADJ_FILENAME= adjoint
%
% Output objective function gradient (using continuous adjoint)
GRAD_OBJFUNC_FILENAME= of_grad.dat
%
% Output file surface flow coefficient (w/o extension)
SURFACE_FILENAME= surface_flow
%
% Output file surface adjoint coefficient (w/o extension)
SURFACE_ADJ_FILENAME= surface_adjoint
%
% Read binary restart files (YES, NO)
READ_BINARY_RESTART= YES

% --------------------- OPTIMAL SHAPE DESIGN DEFINITION -----------------------%
%
% Available flow based objective functions or constraint functions
%    DRAG, LIFT, SIDEFORCE, EFFICIENCY, BUFFET,
%    FORCE_X, FORCE_Y, FORCE_Z,
%    MOMENT_X, MOMENT_Y, MOMENT_Z,
%    THRUST, TORQUE, FIGURE_OF_MERIT,
%    EQUIVALENT_AREA, NEARFIELD_PRESSURE,
%    TOTAL_HEATFLUX, MAXIMUM_HEATFLUX,
%    INVERSE_DESIGN_PRESSURE, INVERSE_DESIGN_HEATFLUX,
%    SURFACE_TOTAL_PRESSURE, SURFACE_MASSFLOW
%    SURFACE_STATIC_PRESSURE, SURFACE_MACH
%
% Available geometrical based objective functions or constraint functions
%    AIRFOIL_AREA, AIRFOIL_THICKNESS, AIRFOIL_CHORD, AIRFOIL_TOC, AIRFOIL_AOA,
%    WING_VOLUME, WING_MIN_THICKNESS, WING_MAX_THICKNESS, WING_MAX_CHORD, WING_MIN_TOC, WING_MAX_TWIST, WING_MAX_CURVATURE, WING_MAX_DIHEDRAL
%    STATION#_WIDTH, STATION#_AREA, STATION#_THICKNESS, STATION#_CHORD, STATION#_TOC,
%    STATION#_TWIST (where # is the index of the station defined in GEO_LOCATION_STATIONS)
%
% Available design variables
% 2D Design variables
%    FFD_CONTROL_POINT_2D   (  19, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, x_Mov, y_Mov )
%    FFD_CAMBER_2D          (  20, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_THICKNESS_2D       (  21, Scale | Mark. List | FFD_BoxTag, i_Ind )
%    FFD_TWIST_2D           (  22, Scale | Mark. List | FFD_BoxTag, x_Orig, y_Orig )
%    HICKS_HENNE            (  30, Scale | Mark. List | Lower(0)/Upper(1) side, x_Loc )
%    ANGLE_OF_ATTACK        ( 101, Scale | Mark. List | 1.0 )
%
% 3D Design variables
%    FFD_CONTROL_POINT      (  11, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind, k_Ind, x_Mov, y_Mov, z_Mov )
%    FFD_NACELLE            (  12, Scale | Mark. List | FFD_BoxTag, rho_Ind, theta_Ind, phi_Ind, rho_Mov, phi_Mov )
%    FFD_GULL               (  13, Scale | Mark. List | FFD_BoxTag, j_Ind )
%    FFD_CAMBER             (  14, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_TWIST              (  15, Scale | Mark. List | FFD_BoxTag, j_Ind, x_Orig, y_Orig, z_Orig, x_End, y_End, z_End )
%    FFD_THICKNESS          (  16, Scale | Mark. List | FFD_BoxTag, i_Ind, j_Ind )
%    FFD_ROTATION           (  18, Scale | Mark. List | FFD_BoxTag, x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%    FFD_ANGLE_OF_ATTACK    (  24, Scale | Mark. List | FFD_BoxTag, 1.0 )
%
% Global design variables
%    TRANSLATION            (   1, Scale | Mark. List | x_Disp, y_Disp, z_Disp )
%    ROTATION               (   2, Scale | Mark. List | x_Axis, y_Axis, z_Axis, x_Turn, y_Turn, z_Turn )
%
% Optimization objective function with scaling factor, separated by semicolons.
% To include quadratic penalty function: use OPT_CONSTRAINT option syntax within the OPT_OBJECTIVE list.
% ex= Objective * Scale
OPT_OBJECTIVE= DRAG
%
% Optimization constraint functions with pushing factors (affects its value, not the gradient  in the python scripts), separated by semicolons
% ex= (Objective = Value ) * Scale, use '>','<','='
OPT_CONSTRAINT= (LIFT = 0.2514); ( STATION1_THICKNESS > 0.077); (STATION2_THICKNESS > 0.072); (STATION3_THICKNESS > 0.066); (STATION4_THICKNESS > 0.060); (STATION5_THICKNESS > 0.054)
%
% Maximum number of iterations
OPT_ITERATIONS= 20
%
% Upper bound for each design variable (bound in the python optimizer)
OPT_BOUND_UPPER= 0.1
%
% Lower bound for each design variable (bound in the python optimizer)
OPT_BOUND_LOWER= -0.1
%
% List of design variables (Design variables are separated by semicolons)
DEFINITION_DV= ( 11, 1.0 | WING | WINGBOX, 0, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 0, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 1, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 2, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 3, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 4, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 5, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 6, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 7, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 8, 0, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 0, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 1, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 2, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 3, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 4, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 5, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 6, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 7, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 0, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 1, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 2, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 3, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 4, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 5, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 6, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 7, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 8, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 9, 8, 1, 0.0, 0.0, 1.0 ); ( 11, 1.0 | WING | WINGBOX, 10, 8, 1, 0.0, 0.0, 1.0 )

DV_VALUE_NEW= 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
DV_VALUE_OLD= 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
